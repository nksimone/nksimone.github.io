%title MySQL基础复习
%template code

[[../../index|首页]] - [[../index|Note]] - [[index|DataBase]]
==MySQL基础复习==
----
===常用查询语句===

* 过滤重复数据：`select distinct ...`（`distinct` 必须放在所有列名的前面，且影响的是所有列而不是某指定的一列）
* 返回结果中从第 `2` 行开始的 `5` 行记录：`limit 1,5`，也可写作 `limit 5 offset 1`（第一行为 `0`，第二行为 `1`）
* 通配符 `%`：任何字符出现任意次数
* 通配符 `_`：任何字符出现一次
* 使用正则：`regexp '正则表达式'`
* 区分大小写的正则：`regexp binary '正则表达式'`
* 正则转义特殊字符：就像 `PHP` 的正则处理方式一样，需要使用两个反斜杠，如 `\\.`
* 可在 `MySQL` 交互工具中直接测试正则表达式是否匹配，总是返回 `1` 或者 `0`，如：`select 'hello 123' regexp 'lo [0-9]{3}';`
* 分组数据：`group by ...`
* 过滤分组：`having ...`（用法与 `where` 一样，只是 `where` 用于过滤行，而 `having` 用于过滤组）
* `where` 和 `having` 的另一种理解：`where` 在分组之前过滤，`having` 在分组之后过滤
* `group by` 和 `order by` 的重要区别：`order by` 可以使用自定义列名，而 `group by` 则必须使用表自己所拥有的列名
* 多表联结：`select ... from tab1, tab2 where tab1.xx = tab2.xx ...`
* 多种联结类型：`inner join`（交集）、`A left join B`（以表 `A` 为准）、`A right join B`（以表 `B` 为准）
* 多条查询语句组合：`select ... from ... union select ... from ...`

查询语句的书写顺序：
{{{
select ...
from ...
where ...
group by ...
having ...
order by ...
limit ...
}}}

全文本搜索：
# 必须选择 `MyISAM` 引擎
# 建表时使用 `fulltext` 对指定列建索引
# 查询时使用 `match()` 函数指定需要搜索的列，使用 `against()` 函数指定要使用的搜索表达式
# 返回的结果会按匹配的程度排序，匹配度越好的在越前
# 在 `against()` 里面使用 `with query expansion` 可以开启扩展查询
# 在 `against()` 里面使用 `in boolean mode` 可以开启布尔搜索模式
# 布尔模式下可使用 `+`、`-`、`>`、`<`、`()`、`~`、`*`、`""` 等对全文本搜索进行精确的控制
----
===常用内建函数===

* 获取当前日期和时间：`now()`
* 获取日期：`date(参数)`
* 获取时间：`time(参数)`
* 获取年份：`year(参数)`
* 获取月份：`month(参数)`
* 获取天数：`day(参数)`
* 获取星期：`dayofweek(参数)`
* 获取小时：`hour(参数)`
* 获取分钟：`minute(参数)`
* 获取秒数：`second(参数)`
* 连接字符串：`concat(参数1, 参数2, ...)`
* 去除左右两边的空格：`trim(参数)`、`ltrim(参数)`、`rtrim(参数)`
* 转换成大写：`upper(参数)`
* 转换成小写：`lower(参数)`
* 计算串的长度：`length(参数)`
* 返回最后一个自增值：`last_insert_id()`
----
===聚集函数===

* 返回某列的记录条数：`count(列名)`，`count(*)` 会包含 `NULL` 值
* 返回某列的数值之和：`sum(列名)`
* 返回某列的平均值：`avg(列名)`
* 返回某列的最大值：`max(列名)`
* 返回某列的最小值：`min(列名)`
----
===变更数据===

* 插入新数据：
{{{
insert into tab_name (列列表)
values
(值列表1),
(值列表2),
...
(值列表N);
}}}
* 插入检索出的数据：
{{{
insert into tabA_name (列列表)
select ... from tabB_name where ...;
}}}
* 更新数据：
{{{
update tab_name
set
列1 = 值1,
列2 = 值2,
...
列N = 值N
where ...;
}}}
* 删除记录：
{{{
delete from tab_name
where ...;
}}}
----
===变更数据表===

# 创建表：
{{{
create table tab_name
(...) ...;
}}}
# 增加列/外键等：
{{{
alter table tab_name
add ...;
}}}
# 删除列：
{{{
alter table tab_name
drop column ...;
}}}
# 重命名表：
{{{
rename table old_tab_name to new_tab_name;
}}}
# 删除表：
{{{
drop table tab_name;
}}}
----
===视图===

视图相当于一种代码重用机制，避免多次书写同一代码

* 创建视图：
{{{
create view view_name as
select ... from ... where ...;
}}}
----
===存储过程===

存储过程相当于编程语言里的函数，用于多次调用

* 创建：
{{{
create procedure pro_name (参数表列)
begin
    ...
end;
}}}
* 调用：
{{{
call pro_name (传递参数);
}}}
* 删除：
{{{
drop procedure pro_name;
}}}
* 显示创建存储过程的 `SQL` 代码：
{{{
show create procedure pro_name;
}}}
* 显示所有存储过程状态：
{{{
show procedure status;
}}}
----
===游标===

* 声明游标：
{{{
declare cur_name cursor
for
select ... from ... where ...;
}}}
* 打开游标：
{{{
open cur_name;
}}}
* 使用游标：
{{{
fetch cur_name into var_name;
}}}
* 关闭游标：
{{{
close cur_name;
}}}
----
===触发器===

* 触发器支持的响应：`INSERT`、`UPDATE`、`DELETE`
* 只有表支持触发器，视图和临时表都不支持
* 每个表最多支持 `6` 个触发器（每条 `INSERT`、`UPDATE`、`DELETE` 语句之前或之后）
* 触发器只能先删除再重建，不能直接修改
* 创建触发器：
{{{
create trigger tri_name before/after insert/update/delete on tab_name
...;
}}}
* 删除触发器：
{{{
drop trigger tri_name;
}}}
----
===事务===

* 必须使用 `InnoDB` 存储引擎
* 事务支持管理的操作：`INSERT`、`UPDATE`、`DELETE`
* 标识事务的开始：
{{{
start transaction;
}}}
* 事务回滚：
{{{
rollback;
}}}
* 手动提交：
{{{
commit;
}}}
* 设置保留点：
{{{
savepoint poi_name;
}}}
----
<red>date</red> : 2014-03-21、2014-03-22、2014-03-23、2014-03-24、2014-03-25
----
