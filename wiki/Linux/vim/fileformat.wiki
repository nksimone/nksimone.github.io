[[../../index|Home]] - [[../index|Linux]] - [[index|VIM]]
<h1 class="justcenter">关于VIM中换行符的处理</h1>
%toc
==不同文件格式中的换行符==
在shell下生成一个test文件：  
{{{class="brush:bash"
$ echo -e "i\rlove\rWQ." > test
}}}
然后，用vim打开，内容是 “ I`^`Mlove`^`MWQ. ” , 这时执行 `:%s/\r/\r/g` 发现文件正常了。</br>
但是这里面有一个不正常，:%s/\r/\r/g 这个命令是把\r替换成了\r , 应该什么都没变化啊。</br>
于是仔细检查了一下，发现这个问题还要从各个系统不同的换行符开始，如下表：</br>

|               | windows/dos | unix | mac |
|---------------|-------------|------|-----|
| 换行符        | CRLF        | LF   | CR  |
| SHELL中的表示 | \r\n        | \n   | \r  |
| 16进制符      | 0d0a        | 0a   | 0d  |

`:%s/\r/\r/g` 这个命令中，第一个\r与第二个\r的意义是可能不相同的；
第一个\r代表 0d ,也就是CR；而第二个\r，是VIM自行根据fileformat内置变量判断决定的，见下表：

|              | \n | \r         |
|--------------|----|------------|
| :set ff=dos  | 00 | 0d0a(\n\r) |
| :set ff=unix | 00 | 0a(\n)     |
| :set ff=mac  | 00 | 0d(\r)     |

OK,现在就可以解释上面的 `:%s/\r/\r/g` 为什么会把 0d变成0a了。

另外还有两个小Tip：
# 根据fileformat的不同，vim会自动在文件的最未尾添加一个换行符，除非启动时`vim -b xxx` </br>
# 任何情形下，VI中的\n都是00，在VIM中会显示为^@


==去除Windows文件中的^M==
* 第一种方法：VIM正常模式下输入`:set fileformat=unix`

* 第二种方法
        # 打开vim</br>
        # 按ESC</br>   
        # 输入  `:%s/ctrl+v ctrl+m $//g`  </br>
                * 中间不要有空格，会把^M在行结尾的都替换掉，全局替换的话去掉`$`符</br>
                * 注意^M的输入方式：ctrl+v ctrl+m</br>

* 第三种方法：`dos2unix xxx.txt`

<red>Date</red>  2012-01-29
    <div id="goTop" style="display: block">
      <a href="#top"" title="Go Top" onclick="window.scroll(0,0);"><img src="http://nksimone.github.io/public/images/gotoTop.png" height="24" width="24" border="0" alt="Go Top"/>
      </a>
    </div>

%title Simone's Strawberry Yard
----
